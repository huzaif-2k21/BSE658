setwd("C:/Users/hp/Documents/GitHub/BSE658/Module 3/Notebooks/")
filed <- read.csv("urine.csv",sep = ",",header = TRUE)
filed
filed <- filed %>% drop_na()
filed <- subset(filed, select = c(r,gravity,ph,osmo,cond,urea,calc))
filed
correlation <- cor(filed)
data.frame(correlation)
p.mat <- cor_pmat(correlation)
ggcorrplot(correlation, p.mat = p.mat, hc.order = TRUE,
type = "lower", insig = "blank")
library(ggplot2)
library(lsr)
library(psych)
library(tidyverse)
install.packages("ggcorrplot")
library(ggcorrplot)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
library(ggplot2)
library(lsr)
library(psych)
library(tidyverse)
install.packages("ggcorrplot")
library(ggcorrplot)
setwd("C:/Users/hp/Documents/GitHub/BSE658/Module 3/Notebooks/")
filed <- read.csv("urine.csv",sep = ",",header = TRUE)
filed
filed <- filed %>% drop_na()
filed <- subset(filed, select = c(r,gravity,ph,osmo,cond,urea,calc))
filed
correlation <- cor(filed)
data.frame(correlation)
p.mat <- cor_pmat(correlation)
ggcorrplot(correlation)
# method = "circle"
ggcorrplot(correlation, method = "circle")
# Reordering the correlation matrix
# --------------------------------
# using hierarchical clustering
ggcorrplot(correlation, hc.order = TRUE, outline.col = "white")
ggcorrplot(correlation, hc.order = TRUE, type = "lower",
outline.col = "white")
ggcorrplot(correlation, hc.order = TRUE, type = "upper",
outline.col = "white")
ggcorrplot(correlation, hc.order = TRUE, type = "lower",
outline.col = "white",
ggtheme = ggplot2::theme_gray,
colors = c("#6D9EC1", "white", "#E46726"))
ggcorrplot(correlation, hc.order = TRUE, type = "lower",
lab = TRUE)
ggcorrplot(correlation, p.mat = p.mat, hc.order = TRUE,
type = "lower", insig = "blank")
knitr::opts_chunk$set(echo = TRUE)
covid_data
#Let's sample 100 IQ scores randomly from a population (assuming it has mean of 100, and sd of 15)
IQ <- rnorm(n = 100, mean = 100, sd = 15) # sample IQ scores (generate using rnorm)
IQ <- round(IQ) # IQs are whole numbers!
print(IQ)
#Let's also plot and see how it looks like
hist(IQ)
#Find the mean of this sample
mean(IQ)
sd(IQ)
#Let's sample IQ from 10, 000 people
IQ <- rnorm(n = 10000, mean = 100, sd = 15) # sample IQ scores (generate using rnorm)
IQ <- round(IQ) # IQs are whole numbers!
#Finding the mean and sd of this sample
mean(IQ)
sd(IQ)
#Let's also plot a histogram
hist(IQ)
IQ.1 <- round(rnorm(n=5, mean = 100, sd = 15))
IQ.1
# Finding the mean and sd of this sample
mean(IQ.1)
sd(IQ.1)
pants <- data.frame(
type = c("Blue jeans","Grey jeans","Black jeans","Black suit","Blue tracksuit"),
label = c("X1", "X2", "X3", "X4", "X5"),
probability = c(0.5,0.3,0.1,0,0.1))
pants
dbinom( n = 4, size = 20, prob = 1/6 )
dbnom( n = 4, size = 20, prob = 1/6 )
dbinom( n = 4, size = 20, prob = 1/6 )
install.packages("binom")
library(binom)
dbinom( n = 4, size = 20, prob = 1/6 )
pb <- dbinom( n = 4, size = 20, prob = 1/6 )
pb <- dbinom( n = 1000, size = 20, prob = 1/6 )
pb <- dbinom( size = 20, prob = 1/6 )
pb <- dbinom( x=40, size = 20, prob = 1/6 )
pb <- dbinom( x=40, size = 20, prob = 1/6 )
pb
pb <- dbinom( p=0.75, size = 20, prob = 1/6 )
pb <- dbinom(n=40, size = 20, prob = 1/6 )
pb <- dbinom(x=4, size = 20, prob = 1/6 )
pb
#Find the probability of rolling 0 skulls or 1 skull or 2 skulls or 3 skulls or 4 skulls
pbinom( q= 4, size = 20, prob = 1/6)
#Practice - Find probability of getting 0-5 heads in 50 trials of coin flip
qbinom( p = 0.75, size = 20, prob = 1/6 )
#Practice - Find the 40th percentile
z <- rbinom( n = 100, size = 20, prob = 1/6 )
z
#Let's also plot this and see how it looks
hist(z, col = 'steelblue')
x <- rnorm(100)
hist(x, col = 'steelblue')
abline(v = mean(x), lty = 2, lwd = 2)
par(mfrow = c(1, 2)) #Create a 1 x 2 plotting matrix
# The next 2 plots created will be plotted next to each other in one row
# Grid of X-axis values
x <- seq(-4, 8, 0.1)
#-----------------------------------------
# Same standard deviation, different mean
#-----------------------------------------
# Mean 0, sd 1
plot(x, dnorm(x, mean = 0, sd = 1), type = "l",
ylim = c(0, 0.6), ylab = "", lwd = 2, col = "red")
# Mean 3, sd 1
lines(x, dnorm(x, mean = 3, sd = 1), col = "blue", lty = 1, lwd = 2)
# Adding a legend
legend("topright", legend = c("0 1", "3 1"), col = c("red", "blue"),
title = expression(paste(mu, " ", sigma)),
title.adj = 0.9, lty = 1, lwd = 2, box.lty = 0)
#-----------------------------------------
# Same mean, different standard deviation
#-----------------------------------------
# Mean 1, sd 1
plot(x, dnorm(x, mean = 1, sd = 1), type = "l",
ylim = c(0, 1), ylab = "", lwd = 2, col = "red")
# Mean 1, sd 0.5
lines(x, dnorm(x, mean = 1, sd = 0.5), col = "blue", lty = 1, lwd = 2)
# Adding a legend
legend("topright", legend = c("1 1", "1 0.5"), col = c("red", "blue"),
title = expression(paste(mu, " ", sigma)),
title.adj = 0.75, lty = 1, lwd = 2, box.lty = 0)
par(mfrow = c(1, 1))
y <- rpois(100, lambda = 1.2)
hist(y, col = 'steelblue')
abline(v = mean(y), lty = 2, lwd = 2)
x_dgamma <- seq(0, 2, by = 0.04)
y_dgamma <- dgamma(x_dgamma, shape = 6)
plot(y_dgamma)
z <- rnorm(50, mean = 5, sd = 2)
mean(z)
sd(z)
quantile(z)
quantile(z, 0.16)
mean(x) - sd(x)
mean(x) + sd(x)
CompanyABCProfit<-read.csv("CompanyABCProfit.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
library(ggplot2)
load(diamonds)
abc <- load(diamonds)
abc <- load("diamonds")
abc <- load(diamonds)
diamonds
var <- diamonds
var
head(diamonds)
select(diamonds, c(cut,price)) %>% filter(price>9500) %>%filter(price<10000)
var
var <- select(diamonds, c(cut,price)) %>% filter(price>9500) %>%filter(price<10000)
var
#converting the price with current usd to inr value
var <- select(diamonds, c(cut,price)) %>% filter(price>9500) %>%filter(price<10000) %>% mutate(inr=price*83.95)
var
#converting the price with usd to inr value at 85
var <- select(diamonds, c(cut,price)) %>% filter(price>9500) %>%filter(price<10000) %>% mutate(inr=price*85)
var
#converting the price with usd to inr value at 85
var <- select(diamonds, c(cut,price, carat)) %>% filter(price>9500) %>%filter(price<10000) %>% mutate(inr=price*85)
#converting the price with usd to inr value at 85
var <- select(diamonds, c(cut,price, carat)) %>% filter(price>9500) %>%filter(price<10000) %>% mutate(inr=price*85)
var
ggplot(data = var,aes(x=inr,y=carat, colour = cut))+ geom_point()
ggplot(data = var,aes(x=inr,y=carat, colour = cut))+ geom_histogram()
ggplot(data = var,aes(x=inr,y=carat, colour = cut))+ geom_boxplot()
#loaded the dataset
data("diamonds")
head(diamonds)
ggplot(data = var,aes(x=inr,y=carat))+ geom_point()+facet_wrap(~cut)
ggplot(data = var,aes(x=inr,y=carat))+ geom_point()+facet_wrap(~cut)+ theme_classic()
ggplot(data = var,aes(x=inr,y=carat))+ geom_point()+facet_wrap(~cut)+ theme_minimal()
#converting the price with usd to inr value at 85
var <- select(diamonds, c(price, carat)) %>% filter(price>9500) %>%filter(price<10000) %>% mutate(inr=price*85)
var
ggplot(data = var,aes(x=inr,y=carat))+ geom_point()+facet_wrap(~cut)+ theme_minimal()
#converting the price with usd to inr value at 85
var <- select(diamonds, c(cut,price)) %>% filter(price>9500) %>%filter(price<10000) %>% mutate(inr=price*85)
var
ggplot(data = var,aes(x=inr,y=carat))+ geom_point()+facet_wrap(~cut)+ theme_minimal()
ggplot(diamonds,aes(x=price,y=carat))+ geom_point()+facet_wrap(~cut)+ theme_minimal()
ggplot(var,aes(x=price,y=carat))+ geom_point()+facet_wrap(~cut)+ theme_minimal()
#converting the price with usd to inr value at 85
var <- select(diamonds, c(cut,price, carat)) %>% filter(price>9500) %>%filter(price<10000) %>% mutate(inr=price*85)
ggplot(var,aes(x=price,y=carat))+ geom_point()+facet_wrap(~cut)+ theme_minimal()
ggplot(var,aes(x=price,y=carat))+ geom_point()+facet_wrap(~cut)+ theme_grey()
ggplot(diamonds,aes(x=price,y=carat))+ geom_point()+facet_wrap(~cut)+ theme_grey()
#converting the price with usd to inr value at 85
var <- select(diamonds, c(cut,price)) %>% filter(price>9500) %>%filter(price<10000) %>% mutate(inr=price*85)
var
pants <- data.frame(
type = c("Blue jeans","Grey jeans","Black jeans","Black suit","Blue tracksuit"),
label = c("X1", "X2", "X3", "X4", "X5"),
probability = c(0.5,0.3,0.1,0,0.1))
pants
#Try plotting a bar graph of all the probabilities above
pb <- dbinom(x=4, size = 20, prob = 1/6 )
pb
#Try finding the probability for N = 20 and N=100 trials for a fair coin flip.
#Find the probability of rolling 0 skulls or 1 skull or 2 skulls or 3 skulls or 4 skulls
pbinom( q= 4, size = 20, prob = 1/6)
#Practice - Find probability of getting 0-5 heads in 50 trials of coin flip
qbinom( p = 0.75, size = 20, prob = 1/6 )
#Practice - Find the 40th percentile
z <- rbinom( n = 100, size = 20, prob = 1/6 )
z
#Let's also plot this and see how it looks
hist(z, col = 'steelblue')
library(binom)
knitr::opts_chunk$set(echo = TRUE)
rnorm(0, 1,100)
ab
rbinorm(0, 1,100)
rnorm(10, 75,10)
abc <- rnorm(10, 75,10)
mean(abc)
sd(abc)
rnorm(10000,75,10)
bc <- rnorm(10000,75,10)
bc <- rnorm(10000,75,10)
mean(bc)
sd(bc)
abc <- rnorm(10, 75,10)
mean(abc)
sd(abc)
cd <- rt(1000,5)
hist(cd)
hist(rnorm(1000,0,1))
cd <- rt(1000,5)
hist(cd)
hist(rnorm(10000,0,1))
cd <- rt(10000,5)
hist(cd)
hist(rnorm(10000,0,1))
cd <- rt(10000,5, bins=10)
hist(rnorm(10000,0,1))
cd <- rt(10000,5)
hist(cd, bins=10)
hist(rnorm(10000,0,1))
cd <- rt(10000,5)
t_dist <- hist(cd, bins=10)
plot(t_dist,cd, type="1",col="blue",lwd=3)
hist(rnorm(10000,0,1))
cd <- rt(10000,5)
t_dist <- hist(cd)
plot(t_dist,t_dist$density, type="1",col="blue",lwd=3)
hist(rnorm(10000,0,1))
cd <- rt(10000,5)
t_dist <- hist(cd)
plot(t_dist$mids,t_dist$density, type="1",col="blue",lwd=3)
hist(rnorm(10000,0,1))
cd <- rt(10000,5)
t_dist <- hist(cd)
plot(t_dist$mids,t_dist$density, type="l",col="blue",lwd=3)
hist(rnorm(10000,0,1))
cd <- rt(10000,5)
t_dist <- hist(cd)
hist(cd, bins=20)
plot(t_dist$mids,t_dist$density, type="l",col="blue",lwd=3)
hist(rnorm(10000,0,1))
cd <- rt(10000,5)
t_dist <- hist(cd)
hist(cd, bins=6)
plot(t_dist$mids,t_dist$density, type="l",col="blue",lwd=3)
norm <- hist(rnorm(10000,0,1))
cd <- rt(10000,5)
t_dist <- hist(cd)
hist(cd, bins=6)
plot(norm$mids,norm$density, type="l",col="blue",lwd=3)
plot(t_dist$mids,t_dist$density, type="l",col="blue",lwd=3)
norm <- hist(rnorm(10000,0,1))
cd <- rt(10000,10)
t_dist <- hist(cd)
hist(cd, bins=6)
plot(norm$mids,norm$density, type="l",col="blue",lwd=3)
plot(t_dist$mids,t_dist$density, type="l",col="blue",lwd=3)
norm <- hist(rnorm(10000,0,1))
cd <- rt(10000,100)
t_dist <- hist(cd)
hist(cd, bins=6)
plot(norm$mids,norm$density, type="l",col="blue",lwd=3)
plot(t_dist$mids,t_dist$density, type="l",col="blue",lwd=3)
norm <- hist(rnorm(10000,0,1))
cd <- rt(10000,10)
t_dist <- hist(cd)
hist(cd, bins=6)
plot(norm$mids,norm$density, type="l",col="blue",lwd=3)
plot(t_dist$mids,t_dist$density, type="l",col="blue",lwd=3)
CompanyABCProfit<-read.csv("CompanyABCProfit.csv")
#Let's assume we replicated our sample 10,000 times.
means <- 0 #Initializing vector
sd_norm <- 0
ssd <- 0
for (i in 1:10000) {
IQ.n <- round(rnorm(n=10, mean = 100, sd = 15))
ssd.n <- sqrt((IQ.n-mean(IQ.n))^2)/(length(IQ.n))
#means[i] <- mean(IQ.n)
#sd_norm[i] <- sd(IQ.n)
}
#mean_hist <- hist(means) #Plotting the sampling distribution of the mean
s#d_hist <- hist(sd_norm)
#Let's assume we replicated our sample 10,000 times.
means <- 0 #Initializing vector
sd_norm <- 0
ssd <- 0
for (i in 1:10000) {
IQ.n <- round(rnorm(n=10, mean = 100, sd = 15))
ssd.n <- sqrt((IQ.n-mean(IQ.n))^2)/(length(IQ.n))
#means[i] <- mean(IQ.n)
#sd_norm[i] <- sd(IQ.n)
}
#mean_hist <- hist(means) #Plotting the sampling distribution of the mean
#sd_hist <- hist(sd_norm)
#plot(mean_hist$mids,mean_hist$density, type="l",col="blue",lwd=3)
#plot(sd_hist$mids,sd_hist$density, type="l",col="blue",lwd=3)
#Let's assume we replicated our sample 10,000 times.
means <- 0 #Initializing vector
sd_norm <- 0
ssd <- 0
for (i in 1:10000) {
IQ.n <- round(rnorm(n=10, mean = 100, sd = 15))
ssd.n <- sqrt((IQ.n-mean(IQ.n))^2)/(length(IQ.n))
means[i] <- mean(IQ.n)
sd_norm[i] <- sd(IQ.n)
}
#mean_hist <- hist(means) #Plotting the sampling distribution of the mean
#sd_hist <- hist(sd_norm)
#plot(mean_hist$mids,mean_hist$density, type="l",col="blue",lwd=3)
#plot(sd_hist$mids,sd_hist$density, type="l",col="blue",lwd=3)
#Let's assume we replicated our sample 10,000 times.
means <- 0 #Initializing vector
sd_norm <- 0
ssd <- 0
for (i in 1:10000) {
IQ.n <- round(rnorm(n=10, mean = 100, sd = 15))
ssd.n <- sqrt((IQ.n-mean(IQ.n))^2)/(length(IQ.n))
means[i] <- mean(IQ.n)
sd_norm[i] <- sd(IQ.n)
}
ssd
sd_norm
#mean_hist <- hist(means) #Plotting the sampling distribution of the mean
#sd_hist <- hist(sd_norm)
#plot(mean_hist$mids,mean_hist$density, type="l",col="blue",lwd=3)
#plot(sd_hist$mids,sd_hist$density, type="l",col="blue",lwd=3)
#Let's assume we replicated our sample 10,000 times.
means <- 0 #Initializing vector
sd_norm <- 0
ssd <- 0
for (i in 1:10) {
IQ.n <- round(rnorm(n=10, mean = 100, sd = 15))
ssd.n <- sqrt((IQ.n-mean(IQ.n))^2)/(length(IQ.n))
means[i] <- mean(IQ.n)
sd_norm[i] <- sd(IQ.n)
}
ssd
sd_norm
#mean_hist <- hist(means) #Plotting the sampling distribution of the mean
#sd_hist <- hist(sd_norm)
#plot(mean_hist$mids,mean_hist$density, type="l",col="blue",lwd=3)
#plot(sd_hist$mids,sd_hist$density, type="l",col="blue",lwd=3)
#Let's assume we replicated our sample 10,000 times.
means <- 0 #Initializing vector
sd_norm <- 0
ssd <- 0
for (i in 1:10) {
IQ.n <- round(rnorm(n=100, mean = 100, sd = 15))
ssd.n <- sqrt((IQ.n-mean(IQ.n))^2)/(length(IQ.n))
means[i] <- mean(IQ.n)
sd_norm[i] <- sd(IQ.n)
}
ssd
sd_norm
#mean_hist <- hist(means) #Plotting the sampling distribution of the mean
#sd_hist <- hist(sd_norm)
#plot(mean_hist$mids,mean_hist$density, type="l",col="blue",lwd=3)
#plot(sd_hist$mids,sd_hist$density, type="l",col="blue",lwd=3)
#Let's assume we replicated our sample 10,000 times.
means <- 0 #Initializing vector
sd_norm <- 0
ssd <- 0
for (i in 1:10) {
IQ.n <- round(rnorm(n=100, mean = 100, sd = 15))
ssd.n <- sqrt(((IQ.n-mean(IQ.n))^2)/(length(IQ.n)))
means[i] <- mean(IQ.n)
sd_norm[i] <- sd(IQ.n)
}
ssd
sd_norm
#mean_hist <- hist(means) #Plotting the sampling distribution of the mean
#sd_hist <- hist(sd_norm)
#plot(mean_hist$mids,mean_hist$density, type="l",col="blue",lwd=3)
#plot(sd_hist$mids,sd_hist$density, type="l",col="blue",lwd=3)
#Let's assume we replicated our sample 10,000 times.
means <- 0 #Initializing vector
sd_norm <- 0
ssd <- 0
for (i in 1:10) {
IQ.n <- round(rnorm(n=100, mean = 100, sd = 15))
ssd.n <- sqrt(((IQ.n-mean(IQ.n))^2)/(length(IQ.n)))
means[i] <- mean(IQ.n)
sd_norm[i] <- sd(IQ.n)
}
hist(ssd)
hist(sd_norm)
#mean_hist <- hist(means) #Plotting the sampling distribution of the mean
#sd_hist <- hist(sd_norm)
#plot(mean_hist$mids,mean_hist$density, type="l",col="blue",lwd=3)
#plot(sd_hist$mids,sd_hist$density, type="l",col="blue",lwd=3)
#Let's assume we replicated our sample 10,000 times.
means <- 0 #Initializing vector
sd_norm <- 0
for (i in 1:10) {
IQ.n <- round(rnorm(n=100, mean = 100, sd = 15))
ssd.n <- sqrt(((IQ.n-mean(IQ.n))^2)/(length(IQ.n)))
means[i] <- mean(IQ.n)
sd_norm[i] <- sd(IQ.n)
}
hist(ssd)
hist(sd_norm)
#mean_hist <- hist(means) #Plotting the sampling distribution of the mean
#sd_hist <- hist(sd_norm)
#plot(mean_hist$mids,mean_hist$density, type="l",col="blue",lwd=3)
#plot(sd_hist$mids,sd_hist$density, type="l",col="blue",lwd=3)
library(lsr)
install.packages('lsr')
library(lsr)
install.packages("lsr")
#load('afl24.Rdata')
ciMean( x = afl$attendance, conf = 0.95 ) #Calculating confidence interval using ciMean function from lsr package
load('afl24.Rdata')
ciMean( x = afl$attendance, conf = 0.95 ) #Calculating confidence interval using ciMean function from lsr package
install.packages('sciplot')
install.packages('gplots')
library ('sciplot')  #bargraph.CI() and lineplot.CI()
library('gplots')    #plotmeans()
#Here’s how to plot the means and confidence intervals drawn using bargraph.CI() from sciplot
bargraph.CI( x.factor = year,             # grouping variable
response = attendance,       # outcome variable
data = afl,                  # data frame with the variables
ci.fun= ciMean,              # name of the function to calculate CIs
xlab = "Year",               # x-axis label
ylab = "Average Attendance") # y-axis label
#Now plotting using lineplot.CI() function
lineplot.CI( x.factor = year,             # grouping variable
response = attendance,       # outcome variable
data = afl,                  # data frame with the variables
ci.fun= ciMean,              # name of the function to calculate CIs
xlab = "Year",               # x-axis label
ylab = "Average Attendance") # y-axis label
#A third type using plotmeans()
plotmeans( formula = attendance ~ year,  # outcome ~ group
data = afl,                   # data frame with the variables
n.label = FALSE)              # don’t show the sample sizes
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(ggcorrplot)
library(tidyverse)
library(tidyverse)
library(tidyverse)
data("mtcars")
df <- data("mtcars")
df
data("mtcars")
data("mtcars")
head(mtcars)
data("mtcars")
head(mtcars)
"?mtcars"
?mtcars
View(mtcars)
mean(mtcars$mpg)
mean(mtcars$mpg)
median(mtcars$mpg)
iqr_mt <- IQR(mtcars$wt)
iqr_mt <- IQR(mtcars$wt)
iqr_mt <- IQR(mtcars$wt)
iqr_mt
iqr_mt <- IQR(mtcars$wt)
iqr_mt
sd(mtcars$wt)
ggplot(data = mtcars, aes(x=disp, y=wt)) + geom_dotplot(alpha=0.8)
ggplot(data = mtcars, aes(x=disp, y=wt)) + geom_line(alpha=0.8)
ggplot(data = mtcars, aes(x=disp, y=wt)) + geom_point(alpha=0.8)
ggplot(data = mtcars, aes(x=wt, y=mpg)) + geom_point(alpha=0.8) +ggtitle("" Weight Vs Mileage")
ggplot(data = mtcars, aes(x=wt, y=mpg)) + geom_point(alpha=0.8) +ggtitle(" Weight Vs Mileage")
ggplot(data = mtcars, aes(x=disp, y=wt)) + geom_point(alpha=0.8) +ggtitle("Displacement vs Weight")
ggplot(data = mtcars, aes(x=mpg, y=hp)) + geom_point(alpha=0.8) +ggtitle("Milage vs Horsepower")
cor_matrix <- cor(mtcars)
ggcorrplot(cor_matrix, type = "lower", lab = TRUE, hc.order = TRUE, insig = "blank",lab_size = 3) +
ggtitle("Correlation Matrix Plot")
aggregate_mt <- aggregate(mpg ~ am + vs, data = mtcars, FUN = mean)
aggregate_mt <- aggregate(mpg ~ am + vs, data = mtcars, FUN = mean)
aggregate_mt
